# In YAML, 'raw' and 'endraw' can't come at the beginning of a token or at the end of a quoted value, which is why they're in weird places. They are
# needed to escape YAML templating variables, which still allowing cookiecutter to replace the value of the repository name.

# Instructions to clear caches:
# 1) List all caches for this repo using the Github CLI: gh api  -H "Accept: application/vnd.github+json" /repos/Lightmatter/django-hydra/actions/caches
# 2) Delete each cache id from the list, e.g.: gh api --method DELETE  -H "Accept: application/vnd.github+json" /repos/Lightmatter/django-hydra/actions/caches/1


name: Project CI
on: pull_request

jobs:
  create_and_test_project:
    name: Create and test Django project
    runs-on: ubuntu-latest
    env:
      DATABASE_URL: "psql://postgres:postgres@localhost/postgres"
      DJANGO_SETTINGS_MODULE: "sampleapp.config.settings.test"
      DJANGO_SECRET_KEY: "!!!! Change me !!!!"

    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Install and configure Poetry
        uses: snok/install-poetry@e3dbfd357f4751d4f582d62bc8a71e56c2a7015b # v1.3.2
        with:
          version: 1.2.1
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      # Configure Python for the template
      - uses: actions/setup-python@v4
        id: setup_python
        with:
          python-version-file: ".python-version"
          cache: "poetry"

      - name: Load cached venv if cache exists
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}


      - run: poetry env use ${{ steps.setup_python.outputs.python-version }}

      - name: Install dependencies if cache does not exist
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      # Instantiate the project
      - name: Instantiate project using the values in cookiecutter.json
        run: poetry run cookiecutter . --no-input

      # Configure the project environment
      - uses: actions/setup-node@v3
        with:
          node-version: lts/*
          cache: "npm"
          cache-dependency-path: "**/package-lock.json"

      - run: npm install
        working-directory: ./sampleapp

      - run: npm run build
        working-directory: ./sampleapp

      - run: poetry env use 3.10.2
        working-directory: ./sampleapp

      - name: Install dependencies if cache does not exist
        working-directory: ./sampleapp
        run: poetry install --no-interaction --no-root

      - run: poetry run playwright install
        working-directory: ./sampleapp

      - run: poetry run coverage run --source='.' manage.py test
        working-directory: ./sampleapp

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres

        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432