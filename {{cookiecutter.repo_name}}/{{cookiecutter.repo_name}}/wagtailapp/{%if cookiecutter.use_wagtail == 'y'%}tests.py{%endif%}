from django.test import TestCase

from .blocks import ColumnBlock, LinkBlock, TitleBlock, RowBlock, SpacerBlock
from .models import ContentPage

class BlockTests(TestCase):
    def setUp(self):
        self.url = "https://www.google.com"
        self.string = "Hello world!"

    def convert_title_block(self):
        title = TitleBlock()
        title = title.to_python({"title": self.string})
        return title

    def convert_link_block(self):
        page, created = ContentPage.objects.get_or_create(path='/', slug='123', depth=1, title="foo")
        link = LinkBlock()
        link = link.to_python({"link_text": "Link me!", "page_link" : page.pk})
        link ['page_link'] = page.pk # NOTE: this is dumb but I don't see a good way to grab it as to_python converts it to a Page but this expects an int down the line
        return link

    def render_column_block(self):
        title = self.convert_title_block()
        link = self.convert_link_block()
        block = ColumnBlock()
        result = block.to_python(
            {'body': [
                {
                    'type': 'title',
                    'value': title
                },
                {
                    'type': 'link',
                    'value': link
                },
            ]
        })
        return result

    def render_row_block(self):

        title = self.convert_title_block()
        link = self.convert_link_block()
        column = self.render_column_block()
        block = RowBlock()
        result = block.to_python(
            {'content': [
                {
                    'type': 'column',
                    'value': {
                        'body': [
                            {
                                'type': 'title',
                                'value': title
                            },
                            {
                                'type': 'link',
                                'value': link
                            },
                        ]
                    },
                }
            ]}
        )
        return result

    def test_title_block(self):
        block = TitleBlock()
        html = block.render({"title": self.string})
        self.assertInHTML(self.string, html)

    def test_link_block(self):
        block = LinkBlock()
        html = block.render({"link_text": self.string, "page_link": {"url": self.url}})
        self.assertHTMLEqual(
            html, '<a class="" href="{}">{}</a>'.format(self.url, self.string)
        )

    def test_link_block__nothing_if_empty_text(self):
        block = LinkBlock()
        # no link_text should make it show nothing
        html = block.render({"page_link": {"url": self.url}})
        self.assertHTMLEqual(html, "")

    def test_column_block(self):
        column = self.render_column_block()
        result = column.render_as_block()
        self.assertInHTML('<div>\n    <div class="block-title"><div class="column-title">\n  <h2>Hello world!</h2>\n</div>\n</div>\n<div class="block-link">\n<a class="" href="None">Link me!</a>\n\n</div>\n  </div>', result)

    def test_row_block(self):
        row = self.render_row_block()
        result = row.render_as_block()
        self.assertInHTML('<div class="column">\n  <div>\n    <div class="block-title"><div class="column-title">\n  <h2>Hello world!</h2>\n</div>\n</div>\n<div class="block-link">\n<a class="" href="None">Link me!</a>\n\n</div>\n  </div>\n</div>', result)

    def test_spacer_block(self):
        block = SpacerBlock()
        html = block.render({"height": 10, "mobile_height": 5})
        self.assertHTMLEqual('\n<div class="spacer show-for-medium" style="height:10px;"></div>\n\n\n<div class="mobile-spacer show-for-small-only" style="height:5px;"></div>\n\n', html)
