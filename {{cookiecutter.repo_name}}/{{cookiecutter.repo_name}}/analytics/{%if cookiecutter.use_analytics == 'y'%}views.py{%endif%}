import os
import uuid
from django.apps import AppConfig
from django.dispatch import receiver
from rest_framework import status
from rest_framework.decorators import (
    api_view,
    authentication_classes,
    permission_classes,
)
from rest_framework.response import Response

import analytics
from django.contrib.auth.signals import user_logged_in

from {{cookiecutter.repo_name}}.analytics.serializers import (
    AliasSerializer,
    GroupSerializer,
    IdentifySerializer,
    TrackSerializer,
    ViewEventSerializer,
)
from {{cookiecutter.repo_name}}.analytics.utils import get_analytics_payload


# Alias call for Segment
def alias(request):
    serializer = AliasSerializer(data=request.data, context={"request": request})

    if serializer.is_valid():
        payload = get_analytics_payload(serializer.data, "alias")
        analytics.alias(*payload)
        return True
    else:
        return False


# Identify call for Segment
def identify(request):
    serializer = IdentifySerializer(data=request.data, context={"request": request})

    if serializer.is_valid():
        payload = get_analytics_payload(serializer.data, "identify")
        analytics.identify(*payload)
        return True
    else:
        return False


# Identify call for Segment
@receiver(user_logged_in)
def loginOrRegister(request, **kwargs):
    return alias(request) and identify(request)


# Group call for Segment
@api_view(["POST"])
@authentication_classes([])
@permission_classes([])
def group(request):
    serializer = GroupSerializer(data=request.data, context={"request": request})

    if serializer.is_valid():
        payload = get_analytics_payload(serializer.data, "group")
        analytics.group(*payload)

        return Response({"status": 200}, status=status.HTTP_200_OK)
    else:
        return Response(
            {"error": serializer.errors}, status=status.HTTP_400_BAD_REQUEST,
        )

# Page View Event


@api_view(["POST"])
@authentication_classes([])
@permission_classes([])
def pageView(request):
    serializer = ViewEventSerializer(data=request.data, context={"request": request})

    if serializer.is_valid():
        payload = get_analytics_payload(serializer.data, "view")
        analytics.page(*payload)

        return Response({"status": 200}, status=status.HTTP_200_OK)
    else:
        return Response(
            {"error": serializer.errors}, status=status.HTTP_400_BAD_REQUEST,
        )


# Screen View Event
@api_view(["POST"])
@authentication_classes([])
@permission_classes([])
def screenView(request):
    serializer = ViewEventSerializer(data=request.data, context={"request": request})

    if serializer.is_valid():
        payload = get_analytics_payload(serializer.data, "view")
        analytics.screen(*payload)

        return Response({"status": 200}, status=status.HTTP_200_OK)
    else:
        return Response(
            {"error": serializer.errors}, status=status.HTTP_400_BAD_REQUEST,
        )


# Tracking call for Segment
@api_view(["POST"])
@authentication_classes([])
@permission_classes([])
def track(request):
    serializer = TrackSerializer(data=request.data, context={"request": request})

    if serializer.is_valid():
        payload = get_analytics_payload(serializer.data, "track")
        analytics.track(*payload)

        return Response({"status": 200}, status=status.HTTP_200_OK)
    else:
        serializer.is_valid(raise_exception=True)

        return Response(
            {"error": serializer.errors}, status=status.HTTP_400_BAD_REQUEST,
        )
