[tool.poetry]
name = "{{cookiecutter.repo_name}}"
version = "0.1.0"
description = ""
authors = ["{{cookiecutter.author_name}} <{{cookiecutter.email}}>"]

[tool.poetry.dependencies]
python = "^3.11"
Django = {extras = ["argon2"], version = "^4.1.10"}
whitenoise = {extras = ["brotli"], version = "^6.4.0"}
django-allauth = "^0.54.0"
django-htmx = "^1.15.0"
django-annoying = "^0.10.6"
django-environ = "^0.10.0"
django-extensions = "^3.2.3"
django-model-utils = "^4.2.0"
psycopg2-binary = "^2.9.3"
boto3 = "^1.26.51"
django-storages = "^1.13.2"
uvicorn = "^0.22.0"
gunicorn = "^20.1.0"
sentry-sdk = "^1.29.2"
Pillow = "^10.0.0"
django-anymail = {extras = ["sendgrid"], version = "^10.0"}
django-vite = "^2.0.2"
tblib = "^2.0.0"
django-cachalot = "^2.5.0"
redis = "^4.4.0"
django-redis = "^5.2.0"
django-jinja = "^2.10.2"
heroicons = {extras = ["jinja"], version = "^2.1.1"}
django-rich = "^1.7.0"
django-hijack = "^3.4.1"
django-cors-headers = "^3.13.0"
django-csp = "^3.7"
pytest-dotenv = "^0.5.2"
django-robots = "^5.0"

[tool.poetry.group.dev.dependencies]
Werkzeug = "2.0.2"
coverage = {extras = ["toml"], version = "^6.4.1"}
ipython = "^8.13.1"
ipdb = "^0.13.13"
ptpython = "^3.0.20"
django-debug-toolbar = "^4.1.0"
model-bakery = "^1.12.0"
watchdog = "2.2.0"
honcho = "1.1.0"
unittest-xml-reporting = "^3.2.0"
pywatchman = "^1.4.1"
icecream = "^2.1.1"
pre-commit = "^2.17.0"
pudb = "^2022.1"
poetryup = "^0.12.7"
importmagic = "^0.1.7"
epc = "^0.0.5"
django-silk = "^5.0.3"
cruft = "^2.15.0"
cookiecutter = "^2.1.1"
black = "^22.10.0"
isort = "^5.10.1"
djlint = "^1.32.1"
pydocstyle = "^6.3.0"
pylint-django = "^2.5.3"
pylint-celery = "^0.3"
ruff = "^0.0.261"

[tool.poetry.group.test.dependencies]
pytest = "^7.4.0"
pytest-django = "^4.5.2"
pytest-playwright = "^0.4.2"

[tool.black]
force-exclude = '''
(
  /migrations/
)
'''
include = '\.pyi?$'
line-length = 92
target-version = ['py311']

[tool.ruff]
line-length = 92
force-exclude = true

select = [
  "E",  # pyflakes, pycodestyle
  "F",  # pyflakes
  "C90",  # mccabe
  "I",  # isort
  "S",  # flake8-bandit
  "B",  # flake8-bugbear
  "A",  # flake8-builtins
  "C4",  # flake8-comprehensions
  "ERA",  # flake8-eradicate
  "N",  # pep8-naming
  "W",  # pycodestyle
]
ignore = [
  "S101",
]

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "*migrations/*.py",
    "manage.py"
]

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Assume Python 3.11.
target-version = "py311"

[tool.ruff.per-file-ignores]
"{{cookiecutter.repo_name}}/config/settings/*.py" = ["F405"]
"{{cookiecutter.repo_name}}/home/views.py" = ["N802"]
"*tests.py" = ["S105"]
"*tests/*.py" = ["S105"]

[tool.ruff.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.ruff.isort]
known-third-party = ["django", "django.contrib", "django.utils"]

[tool.coverage.run]
branch = true

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_lines = [
  # Have to re-enable the standard pragma
  "pragma: no cover",

  # Don't complain about missing debug-only code:
  "def __repr__",
  "if self.debug",

  # Don't complain if tests don't hit defensive assertion code:
  "raise AssertionError",
  "raise NotImplementedError",

  # Don't complain if non-runnable code isn't run:
  "if 0:",
  "if __name__ == .__main__.:",
]

ignore_errors = true
omit = [
  "*/migrations/*",
  "manage.py",
  "{{cookiecutter.repo_name}}/config/*",
  "**/tests.py",
]

[tool.ipdb]
context = 10

[tool.djlint]
ignore = ["H006", "H023", "T002"]
profile = "jinja"
indent = 2
max_line_length=92
max_attribute_length=6
use_gitignore=true

[tool.pytest.ini_options]
env_files = [".env", ".env.example"]
python_files = ["tests.py", "test_*.py", "*_tests.py"]
# https://pytest-django.readthedocs.io/en/latest/database.html#example-work-flow-with-reuse-db-and-create-db
addopts = ["--reuse-db", "--ds={{cookiecutter.repo_name}}.config.settings.test"]
markers = ["integration"]

[tool.cruft]
skip = [".git", "node_modules"]

[build-system]
requires = ["setuptools", "poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
